[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
<<<<<<< HEAD
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
=======
>>>>>>> 33d4af048b1d4618129274920434a425a9310de5
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "import_ipynb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "import_ipynb",
        "description": "import_ipynb",
        "detail": "import_ipynb",
        "documentation": {}
    },
    {
        "label": "recommend_movies",
        "importPath": "forth",
        "description": "forth",
        "isExtraImport": true,
        "detail": "forth",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
<<<<<<< HEAD
=======
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
>>>>>>> 33d4af048b1d4618129274920434a425a9310de5
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_genres",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"\n    credits_url = f\"{MOVIE_URL}{movie_id}/credits?api_key={API_KEY}\"\n    keywords_url = f\"{MOVIE_URL}{movie_id}/keywords?api_key={API_KEY}\"\n    trailers_url = f\"{MOVIE_URL}{movie_id}/videos?api_key={API_KEY}\"\n    try:\n        # Fetch details\n        details_response = requests.get(details_url).json()",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "fetch_movie_details",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"\n    credits_url = f\"{MOVIE_URL}{movie_id}/credits?api_key={API_KEY}\"\n    keywords_url = f\"{MOVIE_URL}{movie_id}/keywords?api_key={API_KEY}\"\n    trailers_url = f\"{MOVIE_URL}{movie_id}/videos?api_key={API_KEY}\"\n    try:\n        # Fetch details\n        details_response = requests.get(details_url).json()\n        credits_response = requests.get(credits_url).json()\n        keywords_response = requests.get(keywords_url).json()",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "fetch_movies_data",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def fetch_movies_data():\n    movies_data = []\n    page = 1\n    while len(movies_data) < 6000:\n        try:\n            response = requests.get(\n                SEARCH_URL, params={\n                    'api_key': API_KEY,\n                    'language': 'en-US',\n                    'sort_by': 'popularity.desc',",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "save_to_csv",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def save_to_csv(data):\n    with open('movies_data.csv', 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(fields)\n        writer.writerows(data)\n# Main - Runing stuff above\ndata = fetch_movies_data()\nsave_to_csv(data)\nprint(\"Saved in movies_data.csv\")",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "API_KEY = '401aa692d6aa27c92e0fc0adedd58769'\nBASE_URL = 'https://api.themoviedb.org/3/'\nMOVIE_URL = BASE_URL + 'movie/'\nSEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "BASE_URL = 'https://api.themoviedb.org/3/'\nMOVIE_URL = BASE_URL + 'movie/'\nSEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "MOVIE_URL",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "MOVIE_URL = BASE_URL + 'movie/'\nSEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "SEARCH_URL",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "SEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "fields",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "fields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"\n    credits_url = f\"{MOVIE_URL}{movie_id}/credits?api_key={API_KEY}\"\n    keywords_url = f\"{MOVIE_URL}{movie_id}/keywords?api_key={API_KEY}\"",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "data = fetch_movies_data()\nsave_to_csv(data)\nprint(\"Saved in movies_data.csv\")",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
<<<<<<< HEAD
        "label": "MovieAkinator",
        "kind": 6,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "class MovieAkinator:\n    def __init__(self, dataframe):\n        self.df = dataframe\n        self.questions = [\n            {\"type\": \"genre\", \"weight\": 0.4, \"text\": \"Is the movie in the {} genre?\"},\n            {\"type\": \"keyword\", \"weight\": 0.45, \"text\": \"Does the movie involve the keyword '{}'?\"},\n            {\"type\": \"adult\", \"weight\": 0.05, \"text\": \"Is this an adult-themed movie?\"},\n            {\"type\": \"director\", \"weight\": 0.05, \"text\": \"Was the movie directed by {}?\"},\n            {\"type\": \"year_range\", \"weight\": 0.05, \"text\": \"Was the movie released between {} and {} years?\"}\n        ]",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/start_game', methods=['POST'])\ndef start_game():\n    global game\n    game = MovieAkinator(df)\n    question = game.generate_weighted_question()\n    return jsonify({\n        \"question\": question,\n        \"films_left\": len(game.possible_movies)",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "start_game",
        "kind": 2,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "def start_game():\n    global game\n    game = MovieAkinator(df)\n    question = game.generate_weighted_question()\n    return jsonify({\n        \"question\": question,\n        \"films_left\": len(game.possible_movies)\n    })\n@app.route('/answer', methods=['POST'])\ndef answer_question():",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "answer_question",
        "kind": 2,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "def answer_question():\n    global game\n    if game is None:\n        return jsonify({\"error\": \"Game not started. Please start the game first.\"}), 400\n    data = request.json\n    question = data.get('question')\n    answer = data.get('answer')  # This could be True, False, or None (for \"idk\")\n    if not question:\n        return jsonify({\"error\": \"Invalid input. Question is required.\"}), 400\n    # Pass None answer to the game logic without filtering",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "def page_not_found(e):\n    return render_template('404.html'), 404\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "app = Flask(__name__)\n# Ensure secret key is set\napp.secret_key = os.getenv('SECRET_KEY', 'fallback_secret_key_change_in_production')\n# Load the movie dataset\ntry:\n    df = pd.read_csv('akinator/cleaned_adultAdded.csv')\nexcept Exception as e:\n    print(f\"Error loading dataset: {e}\")\n    df = pd.DataFrame()  # Fallback empty DataFrame\nclass MovieAkinator:",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "app.secret_key = os.getenv('SECRET_KEY', 'fallback_secret_key_change_in_production')\n# Load the movie dataset\ntry:\n    df = pd.read_csv('akinator/cleaned_adultAdded.csv')\nexcept Exception as e:\n    print(f\"Error loading dataset: {e}\")\n    df = pd.DataFrame()  # Fallback empty DataFrame\nclass MovieAkinator:\n    def __init__(self, dataframe):\n        self.df = dataframe",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "akinator.ap",
        "description": "akinator.ap",
        "peekOfCode": "game = None\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/start_game', methods=['POST'])\ndef start_game():\n    global game\n    game = MovieAkinator(df)\n    question = game.generate_weighted_question()\n    return jsonify({",
        "detail": "akinator.ap",
        "documentation": {}
    },
    {
        "label": "clean_text",
        "kind": 2,
        "importPath": "akinator.cleaner",
        "description": "akinator.cleaner",
        "peekOfCode": "def clean_text(text):\n    \"\"\"\n    Clean and standardize text fields\n    \"\"\"\n    if pd.isna(text):\n        return ''\n    return ' '.join(str(text).split())\ndef clean_genres(genres):\n    \"\"\"\n    Clean and standardize genres",
        "detail": "akinator.cleaner",
        "documentation": {}
    },
    {
        "label": "clean_genres",
        "kind": 2,
        "importPath": "akinator.cleaner",
        "description": "akinator.cleaner",
        "peekOfCode": "def clean_genres(genres):\n    \"\"\"\n    Clean and standardize genres\n    \"\"\"\n    if pd.isna(genres):\n        return ''\n    # Split, strip, remove duplicates, title case\n    genres_list = [g.strip().title() for g in str(genres).split('|')]\n    return '|'.join(sorted(set(genres_list)))\ndef clean_keywords(keywords):",
        "detail": "akinator.cleaner",
        "documentation": {}
    },
    {
        "label": "clean_keywords",
        "kind": 2,
        "importPath": "akinator.cleaner",
        "description": "akinator.cleaner",
        "peekOfCode": "def clean_keywords(keywords):\n    \"\"\"\n    Clean and standardize keywords\n    \"\"\"\n    if pd.isna(keywords):\n        return ''\n    # Split, strip, lowercase, remove duplicates\n    keywords_list = [k.strip().lower() for k in str(keywords).split('|')]\n    return '|'.join(sorted(set(keywords_list)))\ndef preprocess_movie_data(input_file, output_file):",
        "detail": "akinator.cleaner",
        "documentation": {}
    },
    {
        "label": "preprocess_movie_data",
        "kind": 2,
        "importPath": "akinator.cleaner",
        "description": "akinator.cleaner",
        "peekOfCode": "def preprocess_movie_data(input_file, output_file):\n    \"\"\"\n    Comprehensive preprocessing of movie dataset\n    \"\"\"\n    # Read the CSV\n    try:\n        df = pd.read_csv(input_file)\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return None",
        "detail": "akinator.cleaner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "akinator.cleaner",
        "description": "akinator.cleaner",
        "peekOfCode": "def main():\n    # Example usage\n    input_file = 'akinator/adultAdded.csv'  # Your original CSV\n    output_file = 'akinator/cleaned_adultAdded.csv'\n    preprocessed_df = preprocess_movie_data(input_file, output_file)\n    if preprocessed_df is not None:\n        # Display some statistics\n        print(\"\\nDataset Statistics:\")\n        print(f\"Total Movies: {len(preprocessed_df)}\")\n        print(\"\\nSample of Preprocessed Data:\")",
        "detail": "akinator.cleaner",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "akinator.shit",
        "description": "akinator.shit",
        "peekOfCode": "def load_data():\n    # Replace with your dataset path\n    return pd.read_csv(\"akinator/adultAdded.csv\")\n# Ask Yes/No Questions\ndef ask_yes_no(question):\n    while True:\n        answer = input(f\"{question} (yes/no): \").strip().lower()\n        if answer in ['yes', 'no']:\n            return answer == 'yes'\n        print(\"Please answer 'yes' or 'no'.\")",
        "detail": "akinator.shit",
        "documentation": {}
    },
    {
        "label": "ask_yes_no",
        "kind": 2,
        "importPath": "akinator.shit",
        "description": "akinator.shit",
        "peekOfCode": "def ask_yes_no(question):\n    while True:\n        answer = input(f\"{question} (yes/no): \").strip().lower()\n        if answer in ['yes', 'no']:\n            return answer == 'yes'\n        print(\"Please answer 'yes' or 'no'.\")\n# Ask for a Numeric Range\ndef ask_numeric(question, min_val, max_val):\n    while True:\n        try:",
        "detail": "akinator.shit",
        "documentation": {}
    },
    {
        "label": "ask_numeric",
        "kind": 2,
        "importPath": "akinator.shit",
        "description": "akinator.shit",
        "peekOfCode": "def ask_numeric(question, min_val, max_val):\n    while True:\n        try:\n            answer = int(input(f\"{question} (between {min_val} and {max_val}): \"))\n            if min_val <= answer <= max_val:\n                return answer\n            print(f\"Please enter a number between {min_val} and {max_val}.\")\n        except ValueError:\n            print(\"Please enter a valid number.\")\n# Game Logic",
        "detail": "akinator.shit",
        "documentation": {}
    },
    {
        "label": "akinator_game",
        "kind": 2,
        "importPath": "akinator.shit",
        "description": "akinator.shit",
        "peekOfCode": "def akinator_game(data):\n    filtered_data = data.copy()\n    while len(filtered_data) > 1:\n        print(f\"\\nCurrent number of movies: {len(filtered_data)}\")\n        # Filter by Genre\n        if ask_yes_no(\"Do you want to filter by genre?\"):\n            genre = input(f\"Choose a genre ({', '.join(filtered_data['genres'].unique())}): \").strip()\n            filtered_data = filtered_data[filtered_data['genres'].str.contains(genre, case=False, na=False)]\n        # Filter by Release Year\n        if ask_yes_no(\"Do you want to filter by release year?\"):",
        "detail": "akinator.shit",
        "documentation": {}
    },
    {
=======
>>>>>>> 33d4af048b1d4618129274920434a425a9310de5
        "label": "load_users",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:\n        return json.load(f)\ndef save_users(users):\n    with open('users.json', 'w') as f:\n        json.dump(users, f, indent=4)\ndef hash_password(password):",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "save_users",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def save_users(users):\n    with open('users.json', 'w') as f:\n        json.dump(users, f, indent=4)\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\n# Authentication routes\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    username = data.get('username')",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\n# Authentication routes\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    age = data.get('age')\n    gender = data.get('gender')",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def register():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    age = data.get('age')\n    gender = data.get('gender')\n    if not all([username, password, age, gender]):\n        return jsonify({'error': 'All fields are required'}), 400\n    users = load_users()\n    if username in users:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def login():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    if not username or not password:\n        return jsonify({'error': 'Username and password are required'}), 400\n    users = load_users()\n    if username not in users or users[username]['password'] != hash_password(password):\n        return jsonify({'error': 'Invalid credentials'}), 401\n    session['username'] = username",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def logout():\n    session.pop('username', None)\n    return jsonify({'message': 'Logged out successfully'}), 200\n# Static file serving routes\n@app.route('/')\ndef index():\n    if 'username' not in session:\n        return send_from_directory(app.static_folder, \"login.html\")\n    return send_from_directory(app.static_folder, \"index.html\")\n@app.route('/<path:path>')",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def index():\n    if 'username' not in session:\n        return send_from_directory(app.static_folder, \"login.html\")\n    return send_from_directory(app.static_folder, \"index.html\")\n@app.route('/<path:path>')\ndef serve_static_file(path):\n    return send_from_directory(app.static_folder, path)\n@app.route('/recommend', methods=['POST'])\ndef recommend_endpoint():\n    if 'username' not in session:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "serve_static_file",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def serve_static_file(path):\n    return send_from_directory(app.static_folder, path)\n@app.route('/recommend', methods=['POST'])\ndef recommend_endpoint():\n    if 'username' not in session:\n        return jsonify({'error': 'Unauthorized'}), 401\n    # Get the logged-in username\n    username = session['username']\n    # Parse the selected movies from the request\n    data = request.json",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "recommend_endpoint",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def recommend_endpoint():\n    if 'username' not in session:\n        return jsonify({'error': 'Unauthorized'}), 401\n    # Get the logged-in username\n    username = session['username']\n    # Parse the selected movies from the request\n    data = request.json\n    selected_movies = data.get('selected_movies', [])\n    if not selected_movies:\n        return jsonify({'error': 'No movies selected'}), 400",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "movie_details",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def movie_details():\n    if 'username' not in session:\n        return jsonify({'error': 'Unauthorized'}), 401\n    title = request.args.get('title')\n    movie = movies_data[movies_data['title'] == title]\n    if movie.empty:\n        return jsonify({'error': f\"No details found for movie: {title}\"})\n    movie = movie.iloc[0]\n    trailer_url = movie['trailer_url']\n    if pd.isna(trailer_url):",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "is_logged_in",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def is_logged_in():\n    if 'username' in session:\n        users = load_users()\n        selected_movies = users[session['username']].get('selected_movies', [])\n        return jsonify({'logged_in': True, 'username': session['username'], 'selected_movies': selected_movies})\n    return jsonify({'logged_in': False})\n@app.route('/suggest', methods=['GET'])\ndef suggest_movies():\n    if 'username' not in session:\n        return jsonify({'error': 'Unauthorized'}), 401",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "suggest_movies",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def suggest_movies():\n    if 'username' not in session:\n        return jsonify({'error': 'Unauthorized'}), 401\n    query = request.args.get('query', '').lower()\n    if not query:\n        return jsonify([])\n    # Filter cleaned_data for titles matching the query\n    # filtered_data = cleaned_data[cleaned_data['title'].str.lower().str.contains(query, na=False)]\n    filtered_data = cleaned_data[cleaned_data['title'].str.contains(query, case=False, na=False)].head(10)\n    # Create a dictionary to map titles to poster URLs",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "cleaned_data",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "cleaned_data = pd.read_csv('cleaned_movies.csv')\nmovies_data = pd.read_csv('2Milestone/adultAdded.csv')\napp = Flask(__name__, static_folder=\".\")\nCORS(app, supports_credentials=True)  # Enable CORS with credentials\napp.secret_key = 'your_secret_key_here'  # Important for session management\n# User management functions\ndef load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "movies_data",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "movies_data = pd.read_csv('2Milestone/adultAdded.csv')\napp = Flask(__name__, static_folder=\".\")\nCORS(app, supports_credentials=True)  # Enable CORS with credentials\napp.secret_key = 'your_secret_key_here'  # Important for session management\n# User management functions\ndef load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "app = Flask(__name__, static_folder=\".\")\nCORS(app, supports_credentials=True)  # Enable CORS with credentials\napp.secret_key = 'your_secret_key_here'  # Important for session management\n# User management functions\ndef load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:\n        return json.load(f)",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "app.secret_key = 'your_secret_key_here'  # Important for session management\n# User management functions\ndef load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:\n        return json.load(f)\ndef save_users(users):\n    with open('users.json', 'w') as f:",
        "detail": "deploy.app",
        "documentation": {}
    }
]