[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "import_ipynb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "import_ipynb",
        "description": "import_ipynb",
        "detail": "import_ipynb",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "recommend_movies",
        "importPath": "forth",
        "description": "forth",
        "isExtraImport": true,
        "detail": "forth",
        "documentation": {}
    },
    {
        "label": "get_genres",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"\n    credits_url = f\"{MOVIE_URL}{movie_id}/credits?api_key={API_KEY}\"\n    keywords_url = f\"{MOVIE_URL}{movie_id}/keywords?api_key={API_KEY}\"\n    trailers_url = f\"{MOVIE_URL}{movie_id}/videos?api_key={API_KEY}\"\n    try:\n        # Fetch details\n        details_response = requests.get(details_url).json()",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "fetch_movie_details",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"\n    credits_url = f\"{MOVIE_URL}{movie_id}/credits?api_key={API_KEY}\"\n    keywords_url = f\"{MOVIE_URL}{movie_id}/keywords?api_key={API_KEY}\"\n    trailers_url = f\"{MOVIE_URL}{movie_id}/videos?api_key={API_KEY}\"\n    try:\n        # Fetch details\n        details_response = requests.get(details_url).json()\n        credits_response = requests.get(credits_url).json()\n        keywords_response = requests.get(keywords_url).json()",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "fetch_movies_data",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def fetch_movies_data():\n    movies_data = []\n    page = 1\n    while len(movies_data) < 6000:\n        try:\n            response = requests.get(\n                SEARCH_URL, params={\n                    'api_key': API_KEY,\n                    'language': 'en-US',\n                    'sort_by': 'popularity.desc',",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "save_to_csv",
        "kind": 2,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "def save_to_csv(data):\n    with open('movies_data.csv', 'w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(fields)\n        writer.writerows(data)\n# Main - Runing stuff above\ndata = fetch_movies_data()\nsave_to_csv(data)\nprint(\"Saved in movies_data.csv\")",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "API_KEY = '401aa692d6aa27c92e0fc0adedd58769'\nBASE_URL = 'https://api.themoviedb.org/3/'\nMOVIE_URL = BASE_URL + 'movie/'\nSEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "BASE_URL = 'https://api.themoviedb.org/3/'\nMOVIE_URL = BASE_URL + 'movie/'\nSEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "MOVIE_URL",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "MOVIE_URL = BASE_URL + 'movie/'\nSEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "SEARCH_URL",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "SEARCH_URL = BASE_URL + 'discover/movie'\n# features we need \nfields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "fields",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "fields = [\n    'title', 'genres', 'release_year', 'user_rating',\n    'keywords', 'director', 'description', 'poster_url', 'trailer_url'\n]\ndef get_genres(genre_objects):\n    return [genre['name'] for genre in genre_objects]\ndef fetch_movie_details(movie_id):\n    details_url = f\"{MOVIE_URL}{movie_id}?api_key={API_KEY}&language=en-US\"\n    credits_url = f\"{MOVIE_URL}{movie_id}/credits?api_key={API_KEY}\"\n    keywords_url = f\"{MOVIE_URL}{movie_id}/keywords?api_key={API_KEY}\"",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "1Milestone.FirstMilestone",
        "description": "1Milestone.FirstMilestone",
        "peekOfCode": "data = fetch_movies_data()\nsave_to_csv(data)\nprint(\"Saved in movies_data.csv\")",
        "detail": "1Milestone.FirstMilestone",
        "documentation": {}
    },
    {
        "label": "MovieAkinator",
        "kind": 6,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "class MovieAkinator:\n    def __init__(self, dataframe):\n        self.possible_movies = dataframe.copy()\n        self.asked_elements = set()\n#generate the next question based on most frequent genre, keyword, or director\n    def generate_question(self):\n        if len(self.possible_movies) <= 1:\n            return None\n#Get the most common genre/keyword/director\n        best = self.get_most_frequent_element()",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "load_users",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:\n        return json.load(f)\n# Save user data back to the json file\ndef save_users(users):\n    with open('users.json', 'w') as f:\n        json.dump(users, f, indent=4)",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "save_users",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def save_users(users):\n    with open('users.json', 'w') as f:\n        json.dump(users, f, indent=4)\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\n# register a new user\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    username = data.get('username')",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\n# register a new user\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    age = data.get('age')\n    gender = data.get('gender')",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def register():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    age = data.get('age')\n    gender = data.get('gender')\n    if not all([username, password, age, gender]):\n        return jsonify({'error': 'All fields are required'}), 400\n    users = load_users()\n    if username in users:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def login():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    if not username or not password:\n        return jsonify({'error': 'Username and password are required'}), 400\n    users = load_users()\n    if username not in users or users[username]['password'] != hash_password(password):\n        return jsonify({'error': 'Invalid credentials'}), 401\n    session['username'] = username",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def logout():\n    session.pop('username', None)\n    return jsonify({'message': 'Logged out successfully'}), 200\n#Get recommendations based on user-selected movies\n@app.route('/')\ndef deploy_index():\n    return render_template('index.html')\n@app.route('/index.html')\ndef serve_index():\n    return render_template('index.html')",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "deploy_index",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def deploy_index():\n    return render_template('index.html')\n@app.route('/index.html')\ndef serve_index():\n    return render_template('index.html')\n@app.route('/<path:path>')\ndef serve_static_file(path):\n#if files are in static folder\n    return send_from_directory(app.static_folder, path)\nfrom forth import recommend_movies  ",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "serve_index",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def serve_index():\n    return render_template('index.html')\n@app.route('/<path:path>')\ndef serve_static_file(path):\n#if files are in static folder\n    return send_from_directory(app.static_folder, path)\nfrom forth import recommend_movies  \n@app.route('/recommend', methods=['POST'])\ndef recommend_endpoint():\n    data = request.json",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "serve_static_file",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def serve_static_file(path):\n#if files are in static folder\n    return send_from_directory(app.static_folder, path)\nfrom forth import recommend_movies  \n@app.route('/recommend', methods=['POST'])\ndef recommend_endpoint():\n    data = request.json\n    selected_movies = data.get('selected_movies', [])\n    if not selected_movies:\n        return jsonify({'error': 'No movies selected'}), 400",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "recommend_endpoint",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def recommend_endpoint():\n    data = request.json\n    selected_movies = data.get('selected_movies', [])\n    if not selected_movies:\n        return jsonify({'error': 'No movies selected'}), 400\n#save selected movies for logged-in users\n    if 'username' in session:\n        username = session['username']\n        users = load_users()\n        if username in users:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "movie_details",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def movie_details():\n    title = request.args.get('title')\n    movie = movies_data[movies_data['title'] == title]\n    if movie.empty:\n        return jsonify({'error': f\"No details found for movie: {title}\"})\n    movie = movie.iloc[0]\n    trailer_url = movie['trailer_url']\n    if pd.isna(trailer_url):\n        trailer_url = None\n    else:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "is_logged_in",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def is_logged_in():\n    if 'username' in session:\n        users = load_users()\n        selected_movies = users[session['username']].get('selected_movies', [])\n        return jsonify({'logged_in': True, 'username': session['username'], 'selected_movies': selected_movies})\n    return jsonify({'logged_in': False})\n#Suggest movies based on a search query\n@app.route('/suggest', methods=['GET'])\ndef suggest_movies():\n    query = request.args.get('query', '').lower()",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "suggest_movies",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def suggest_movies():\n    query = request.args.get('query', '').lower()\n    if not query:\n        return jsonify([])\n# find movies matching the query\n    filtered_data = cleaned_data[cleaned_data['title'].str.contains(query, case=False, na=False)].head(10)\n    poster_map = movies_data.drop_duplicates(subset='title')[['title', 'poster_url']].set_index('title').to_dict()['poster_url']\n#Format suggestions with title and poster URL\n    suggestions = filtered_data.apply(\n        lambda row: {'title': row['title'], 'poster_url': poster_map.get(row['title'], 'default-poster.jpg')},",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "akinator_page",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def akinator_page():\n    return render_template('akinator.html')\n#start new game\n@app.route('/start_game', methods=['POST'])\ndef start_game():\n    global akinator_game\n    data = request.json\n    include_adult = data.get('include_adult', False)\n    filtered_df = akinator_df.copy()\n    if not include_adult:",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "start_game",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def start_game():\n    global akinator_game\n    data = request.json\n    include_adult = data.get('include_adult', False)\n    filtered_df = akinator_df.copy()\n    if not include_adult:\n        filtered_df = filtered_df[filtered_df['adult'] == 0]\n    akinator_game = MovieAkinator(filtered_df)\n    question = akinator_game.generate_question()\n    return jsonify({",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "answer_question",
        "kind": 2,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "def answer_question():\n    global akinator_game\n    if akinator_game is None:\n        return jsonify({\"error\": \"Game not started. Please start the game first.\"}), 400\n    data = request.json\n    question = data.get('question')\n    answer = data.get('answer')  # True/False/None\n    if not question:\n        return jsonify({\"error\": \"Invalid input. Question is required.\"}), 400\n    akinator_game.filter_movies(question, answer)",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "app = Flask(__name__, static_folder=\".\")\nCORS(app, supports_credentials=True)  \napp.secret_key = os.getenv('SECRET_KEY', 'fallback_secret_key_change_in_production')\n#----------------------------------------\n# Deploy (User Management, Recommendations)\n#----------------------------------------\n#load data\ncleaned_data = pd.read_csv('cleaned_movies.csv')\nmovies_data = pd.read_csv('2Milestone/adultAdded.csv')\n#load user data from a json file",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "app.secret_key = os.getenv('SECRET_KEY', 'fallback_secret_key_change_in_production')\n#----------------------------------------\n# Deploy (User Management, Recommendations)\n#----------------------------------------\n#load data\ncleaned_data = pd.read_csv('cleaned_movies.csv')\nmovies_data = pd.read_csv('2Milestone/adultAdded.csv')\n#load user data from a json file\ndef load_users():\n    if not os.path.exists('users.json'):",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "cleaned_data",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "cleaned_data = pd.read_csv('cleaned_movies.csv')\nmovies_data = pd.read_csv('2Milestone/adultAdded.csv')\n#load user data from a json file\ndef load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:\n        return json.load(f)\n# Save user data back to the json file",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "movies_data",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "movies_data = pd.read_csv('2Milestone/adultAdded.csv')\n#load user data from a json file\ndef load_users():\n    if not os.path.exists('users.json'):\n        with open('users.json', 'w') as f:\n            json.dump({}, f)\n    with open('users.json', 'r') as f:\n        return json.load(f)\n# Save user data back to the json file\ndef save_users(users):",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "akinator_game",
        "kind": 5,
        "importPath": "deploy.app",
        "description": "deploy.app",
        "peekOfCode": "akinator_game = None\n#Serve the Akinator game page\n@app.route('/akinator/')\ndef akinator_page():\n    return render_template('akinator.html')\n#start new game\n@app.route('/start_game', methods=['POST'])\ndef start_game():\n    global akinator_game\n    data = request.json",
        "detail": "deploy.app",
        "documentation": {}
    },
    {
        "label": "input_file",
        "kind": 5,
        "importPath": "deploy.cleaner",
        "description": "deploy.cleaner",
        "peekOfCode": "input_file = '2Milestone/adultAdded.csv'  \noutput_file = 'deploy/cleaned_adultAdded1.csv'  \ndf = pd.read_csv(input_file)\ndf_cleaned = df.drop_duplicates(subset='title', keep='first')\n#save the cleaned data to a new file\ndf_cleaned.to_csv(output_file, index=False)\nprint(f\"Duplicates removed. Cleaned file saved to {output_file}\")",
        "detail": "deploy.cleaner",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "deploy.cleaner",
        "description": "deploy.cleaner",
        "peekOfCode": "output_file = 'deploy/cleaned_adultAdded1.csv'  \ndf = pd.read_csv(input_file)\ndf_cleaned = df.drop_duplicates(subset='title', keep='first')\n#save the cleaned data to a new file\ndf_cleaned.to_csv(output_file, index=False)\nprint(f\"Duplicates removed. Cleaned file saved to {output_file}\")",
        "detail": "deploy.cleaner",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "deploy.cleaner",
        "description": "deploy.cleaner",
        "peekOfCode": "df = pd.read_csv(input_file)\ndf_cleaned = df.drop_duplicates(subset='title', keep='first')\n#save the cleaned data to a new file\ndf_cleaned.to_csv(output_file, index=False)\nprint(f\"Duplicates removed. Cleaned file saved to {output_file}\")",
        "detail": "deploy.cleaner",
        "documentation": {}
    },
    {
        "label": "df_cleaned",
        "kind": 5,
        "importPath": "deploy.cleaner",
        "description": "deploy.cleaner",
        "peekOfCode": "df_cleaned = df.drop_duplicates(subset='title', keep='first')\n#save the cleaned data to a new file\ndf_cleaned.to_csv(output_file, index=False)\nprint(f\"Duplicates removed. Cleaned file saved to {output_file}\")",
        "detail": "deploy.cleaner",
        "documentation": {}
    }
]